"use strict";

/**
 * This module sets up the application routes and connects them to their
 * handlers and views. It is imported into server.js
 * @module app-routes
 * @see module:timestamp
 * @see module:header-parser
 * @see module:file-analyzer
 * @see module:url-shortener
 * @see module:image-abstract
 * @param {object} activeApp - ExpressJS object instance
 * @param {object} expressModule - ExpressJS module
 * @param {object} mongoDatabase - MongoDB database
 */
var setupRoutes = function setupRoutes(activeApp, expressModule, mongoDatabase) {
  var path = require('path'); // Prodution and development specific settings


  var appEnv = activeApp.get('env');
  var curDir = process.cwd();
  var tgtPath = null;

  if (appEnv === 'production') {
    tgtPath = curDir + '/dist';
    activeApp.set('views', './dist/views');
  } else {
    tgtPath = curDir + '/src';
    activeApp.set('views', './src/views');
  }

  activeApp.set('view engine', 'pug');
  activeApp.use(expressModule.static(path.resolve(__dirname, 'views')));
  activeApp.use('/static', expressModule.static(path.resolve(__dirname, 'views/static_files')));
  var rTimestamp = expressModule.Router();

  var cbTimestamp = require(tgtPath + '/controllers/timestamp');

  rTimestamp.get('/timestamp/api/v1/:data', cbTimestamp);
  var rHeaderParser = expressModule.Router();

  var cbHeaderParser = require(tgtPath + '/controllers/header-parser');

  rHeaderParser.get('/header-parser/api/v1/whoami', cbHeaderParser);
  var rFileAnalyzer = expressModule.Router();

  var cbFileAnalyzer = require(tgtPath + '/controllers/file-analyzer');

  rFileAnalyzer.post('/file-analyzer/api/v1/findsize', cbFileAnalyzer.postData);
  var rUrlShortener = expressModule.Router();

  var cbUrlShortener = require(tgtPath + '/controllers/url-shortener');

  cbUrlShortener.readCollection(mongoDatabase);
  rUrlShortener.get('/url-shortener/api/v1/new/*', cbUrlShortener.processUrl);
  rUrlShortener.get('/url-shortener/:data', cbUrlShortener.accessLink);
  var rImageAbstract = expressModule.Router();

  var cbImageAbstract = require(tgtPath + '/controllers/image-abstract');

  cbImageAbstract.readCollection(mongoDatabase);
  rImageAbstract.get('/image-abstract/api/v1/entry/*', cbImageAbstract.getSearchResults);
  rImageAbstract.get('/image-abstract/api/v1/history', cbImageAbstract.getRecentHistory);
  activeApp.use(rTimestamp, rHeaderParser, rFileAnalyzer, rUrlShortener, rImageAbstract);
  activeApp.get('/', function (req, res) {
    res.render('index.pug', {
      content: 'landing',
      appEnv: appEnv
    });
  });
  activeApp.get('/timestamp/api/v1', function (req, res) {
    res.render('index.pug', {
      content: 'timestamp',
      appEnv: appEnv
    });
  });
  activeApp.get('/header-parser/api/v1', function (req, res) {
    res.render('index.pug', {
      content: 'header-parser',
      appEnv: appEnv
    });
  });
  activeApp.get('/file-analyzer', function (req, res) {
    res.render('index.pug', {
      content: 'file-analyzer',
      appEnv: appEnv
    });
  });
  activeApp.get('/url-shortener/api/v1', function (req, res) {
    res.render('index.pug', {
      content: 'url-shortener',
      appEnv: appEnv
    });
  });
  activeApp.get('/image-abstract/api/v1', function (req, res) {
    res.render('index.pug', {
      content: 'image-abstract',
      appEnv: appEnv
    });
  });
};

module.exports.setup = setupRoutes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,