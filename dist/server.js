"use strict";

var config = require('./app.config');
/**
 * The entrypoint of the application, this file holds operations that set up
 * the server and MongoDB database
 * @module server
 * @see module:app-routes
 */
// Required NodeJS and Express modules


var http = require('http');

var compression = require('compression');

var express = require('express');

var app = express(); // Using compression for better performance

app.use(compression());

var appRoutes = require('./app-routes');

var main = function main(database) {
  appRoutes.setup(app, express, database); // Create and run the server after everything is set up

  var server = http.createServer(app);
  var portIp = config.server.port || config.server.ip;
  server.listen(portIp, function () {
    if (process.env.NODE_ENV === 'development') {
      console.log("Connection successful: ".concat(portIp));
    }
  });
}; // MongoDB and server set up


var MongoServerClient = require('mongodb').MongoClient; // Create a database variable outside of the database 
// connection callback to reuse the connection pool


var database = null;
var mongoURI = config.endpoints.MONGO_URI;
MongoServerClient.connect(mongoURI, {
  useUnifiedTopology: true,
  useNewUrlParser: true
}, function (err, client) {
  if (err) {
    throw new Error(err);
  } else {
    database = client.db('mydb');
    main(database);
  }
});

if (process.env.NODE_ENV === 'test') {
  module.exports = app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2ZXIuanMiXSwibmFtZXMiOlsiY29uZmlnIiwicmVxdWlyZSIsImh0dHAiLCJjb21wcmVzc2lvbiIsImV4cHJlc3MiLCJhcHAiLCJ1c2UiLCJhcHBSb3V0ZXMiLCJtYWluIiwiZGF0YWJhc2UiLCJzZXR1cCIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsInBvcnRJcCIsInBvcnQiLCJpcCIsImxpc3RlbiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJsb2ciLCJNb25nb1NlcnZlckNsaWVudCIsIk1vbmdvQ2xpZW50IiwibW9uZ29VUkkiLCJlbmRwb2ludHMiLCJNT05HT19VUkkiLCJjb25uZWN0IiwidXNlVW5pZmllZFRvcG9sb2d5IiwidXNlTmV3VXJsUGFyc2VyIiwiZXJyIiwiY2xpZW50IiwiRXJyb3IiLCJkYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUF0QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1FLFdBQVcsR0FBR0YsT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBQ0EsSUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxJQUFNSSxHQUFHLEdBQUdELE9BQU8sRUFBbkIsQyxDQUVBOztBQUNBQyxHQUFHLENBQUNDLEdBQUosQ0FBUUgsV0FBVyxFQUFuQjs7QUFFQSxJQUFNSSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxjQUFELENBQXpCOztBQUVBLElBQU1PLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUNDLFFBQUQsRUFBYztBQUN6QkYsRUFBQUEsU0FBUyxDQUFDRyxLQUFWLENBQWdCTCxHQUFoQixFQUFxQkQsT0FBckIsRUFBOEJLLFFBQTlCLEVBRHlCLENBR3pCOztBQUNBLE1BQU1FLE1BQU0sR0FBR1QsSUFBSSxDQUFDVSxZQUFMLENBQWtCUCxHQUFsQixDQUFmO0FBQ0EsTUFBTVEsTUFBTSxHQUFHYixNQUFNLENBQUNXLE1BQVAsQ0FBY0csSUFBZCxJQUFzQmQsTUFBTSxDQUFDVyxNQUFQLENBQWNJLEVBQW5EO0FBQ0FKLEVBQUFBLE1BQU0sQ0FBQ0ssTUFBUCxDQUFjSCxNQUFkLEVBQXNCLFlBQU07QUFDMUIsUUFBSUksT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsYUFBN0IsRUFBNEM7QUFDMUNDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixrQ0FBc0NSLE1BQXRDO0FBQ0Q7QUFDRixHQUpEO0FBS0QsQ0FYRCxDLENBYUE7OztBQUNBLElBQU1TLGlCQUFpQixHQUFHckIsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQnNCLFdBQTdDLEMsQ0FFQTtBQUNBOzs7QUFDQSxJQUFJZCxRQUFRLEdBQUcsSUFBZjtBQUNBLElBQU1lLFFBQVEsR0FBR3hCLE1BQU0sQ0FBQ3lCLFNBQVAsQ0FBaUJDLFNBQWxDO0FBRUFKLGlCQUFpQixDQUFDSyxPQUFsQixDQUEwQkgsUUFBMUIsRUFBb0M7QUFBRUksRUFBQUEsa0JBQWtCLEVBQUUsSUFBdEI7QUFBNEJDLEVBQUFBLGVBQWUsRUFBRTtBQUE3QyxDQUFwQyxFQUF5RixVQUFTQyxHQUFULEVBQWNDLE1BQWQsRUFBc0I7QUFDN0csTUFBSUQsR0FBSixFQUFTO0FBQ1AsVUFBTSxJQUFJRSxLQUFKLENBQVVGLEdBQVYsQ0FBTjtBQUNELEdBRkQsTUFHSztBQUNIckIsSUFBQUEsUUFBUSxHQUFHc0IsTUFBTSxDQUFDRSxFQUFQLENBQVUsTUFBVixDQUFYO0FBQ0F6QixJQUFBQSxJQUFJLENBQUNDLFFBQUQsQ0FBSjtBQUNEO0FBQ0YsQ0FSRDs7QUFVQSxJQUFJUSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixNQUE3QixFQUFxQztBQUNuQ2UsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsR0FBakI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJy4vYXBwLmNvbmZpZycpO1xuXG4vKipcbiAqIFRoZSBlbnRyeXBvaW50IG9mIHRoZSBhcHBsaWNhdGlvbiwgdGhpcyBmaWxlIGhvbGRzIG9wZXJhdGlvbnMgdGhhdCBzZXQgdXBcbiAqIHRoZSBzZXJ2ZXIgYW5kIE1vbmdvREIgZGF0YWJhc2VcbiAqIEBtb2R1bGUgc2VydmVyXG4gKiBAc2VlIG1vZHVsZTphcHAtcm91dGVzXG4gKi9cblxuLy8gUmVxdWlyZWQgTm9kZUpTIGFuZCBFeHByZXNzIG1vZHVsZXNcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBjb21wcmVzc2lvbiA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uJyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBVc2luZyBjb21wcmVzc2lvbiBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG5hcHAudXNlKGNvbXByZXNzaW9uKCkpO1xuXG5jb25zdCBhcHBSb3V0ZXMgPSByZXF1aXJlKCcuL2FwcC1yb3V0ZXMnKTtcblxuY29uc3QgbWFpbiA9IChkYXRhYmFzZSkgPT4ge1xuICBhcHBSb3V0ZXMuc2V0dXAoYXBwLCBleHByZXNzLCBkYXRhYmFzZSk7XG4gIFxuICAvLyBDcmVhdGUgYW5kIHJ1biB0aGUgc2VydmVyIGFmdGVyIGV2ZXJ5dGhpbmcgaXMgc2V0IHVwXG4gIGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XG4gIGNvbnN0IHBvcnRJcCA9IGNvbmZpZy5zZXJ2ZXIucG9ydCB8fCBjb25maWcuc2VydmVyLmlwO1xuICBzZXJ2ZXIubGlzdGVuKHBvcnRJcCwgKCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgY29uc29sZS5sb2coYENvbm5lY3Rpb24gc3VjY2Vzc2Z1bDogJHtwb3J0SXB9YCk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gTW9uZ29EQiBhbmQgc2VydmVyIHNldCB1cFxuY29uc3QgTW9uZ29TZXJ2ZXJDbGllbnQgPSByZXF1aXJlKCdtb25nb2RiJykuTW9uZ29DbGllbnQ7XG5cbi8vIENyZWF0ZSBhIGRhdGFiYXNlIHZhcmlhYmxlIG91dHNpZGUgb2YgdGhlIGRhdGFiYXNlIFxuLy8gY29ubmVjdGlvbiBjYWxsYmFjayB0byByZXVzZSB0aGUgY29ubmVjdGlvbiBwb29sXG5sZXQgZGF0YWJhc2UgPSBudWxsO1xuY29uc3QgbW9uZ29VUkkgPSBjb25maWcuZW5kcG9pbnRzLk1PTkdPX1VSSTtcblxuTW9uZ29TZXJ2ZXJDbGllbnQuY29ubmVjdChtb25nb1VSSSwgeyB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSB9LCBmdW5jdGlvbihlcnIsIGNsaWVudCkge1xuICBpZiAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycilcbiAgfVxuICBlbHNlIHtcbiAgICBkYXRhYmFzZSA9IGNsaWVudC5kYignbXlkYicpO1xuICAgIG1haW4oZGF0YWJhc2UpO1xuICB9XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBhcHA7IFxufSJdfQ==