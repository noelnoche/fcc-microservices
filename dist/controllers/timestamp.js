"use strict";

/** @module timestamp */

/**
 * Timestamp mircoservice handler
 * @function timestamp
 * @param {object} req - Request from the client
 * @param {object} res - Response from the server
 */
var getTimestamp = function getTimestamp(req, res, next) {
  var monthsArray = Object.freeze(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
  var dataObj = {
    "unix": null,
    "natural": null
  };
  var usrInput = req.params.data;
  var convTime = null; // From Unix to natural

  if (usrInput.match(/^[0-9]+$/)) {
    var dateObj = new Date(parseInt(usrInput, 10));
    var month = dateObj.getMonth();
    var day = dateObj.getDate();
    var year = dateObj.getFullYear();
    convTime = "".concat(monthsArray[month], " ").concat(day, ", ").concat(year);
    dataObj.unix = usrInput;
    dataObj.natural = convTime;
  } // From natural to Unix


  if (usrInput.match(/[A-Za-z]\w+ [0-9]{1,2}, [0-9]{4}/)) {
    convTime = Date.parse(req.params.data).toString(10);
    dataObj.natural = usrInput.charAt(0).toUpperCase() + usrInput.slice(1);
    dataObj.unix = convTime;
  }

  try {
    res.set('Content-Type', 'application/json; charset=utf-8');
    res.status(200).json(dataObj);
  } catch (err) {
    console.error(new Error(err));
    next(err);
  }
};

module.exports = getTimestamp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy90aW1lc3RhbXAuanMiXSwibmFtZXMiOlsiZ2V0VGltZXN0YW1wIiwicmVxIiwicmVzIiwibmV4dCIsIm1vbnRoc0FycmF5IiwiT2JqZWN0IiwiZnJlZXplIiwiZGF0YU9iaiIsInVzcklucHV0IiwicGFyYW1zIiwiZGF0YSIsImNvbnZUaW1lIiwibWF0Y2giLCJkYXRlT2JqIiwiRGF0ZSIsInBhcnNlSW50IiwibW9udGgiLCJnZXRNb250aCIsImRheSIsImdldERhdGUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJ1bml4IiwibmF0dXJhbCIsInBhcnNlIiwidG9TdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwic2V0Iiwic3RhdHVzIiwianNvbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUN2QyxNQUFNQyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLENBQUMsU0FBRCxFQUFZLFVBQVosRUFBd0IsT0FBeEIsRUFBaUMsT0FBakMsRUFBMEMsS0FBMUMsRUFDaEMsTUFEZ0MsRUFDeEIsTUFEd0IsRUFDaEIsUUFEZ0IsRUFDTixXQURNLEVBQ08sU0FEUCxFQUNrQixVQURsQixFQUM4QixVQUQ5QixDQUFkLENBQXBCO0FBRUQsTUFBTUMsT0FBTyxHQUFHO0FBQUUsWUFBUSxJQUFWO0FBQWdCLGVBQVc7QUFBM0IsR0FBaEI7QUFDQSxNQUFNQyxRQUFRLEdBQUdQLEdBQUcsQ0FBQ1EsTUFBSixDQUFXQyxJQUE1QjtBQUNDLE1BQUlDLFFBQVEsR0FBRyxJQUFmLENBTHVDLENBT3ZDOztBQUNELE1BQUlILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlLFVBQWYsQ0FBSixFQUFnQztBQUMvQixRQUFNQyxPQUFPLEdBQUcsSUFBSUMsSUFBSixDQUFTQyxRQUFRLENBQUNQLFFBQUQsRUFBVyxFQUFYLENBQWpCLENBQWhCO0FBQ0EsUUFBTVEsS0FBSyxHQUFHSCxPQUFPLENBQUNJLFFBQVIsRUFBZDtBQUNBLFFBQU1DLEdBQUcsR0FBR0wsT0FBTyxDQUFDTSxPQUFSLEVBQVo7QUFDQSxRQUFNQyxJQUFJLEdBQUdQLE9BQU8sQ0FBQ1EsV0FBUixFQUFiO0FBQ0FWLElBQUFBLFFBQVEsYUFBTVAsV0FBVyxDQUFDWSxLQUFELENBQWpCLGNBQTRCRSxHQUE1QixlQUFvQ0UsSUFBcEMsQ0FBUjtBQUNBYixJQUFBQSxPQUFPLENBQUNlLElBQVIsR0FBZWQsUUFBZjtBQUNBRCxJQUFBQSxPQUFPLENBQUNnQixPQUFSLEdBQWtCWixRQUFsQjtBQUNDLEdBaEJzQyxDQWtCdkM7OztBQUNELE1BQUlILFFBQVEsQ0FBQ0ksS0FBVCxDQUFlLGtDQUFmLENBQUosRUFBd0Q7QUFDdkRELElBQUFBLFFBQVEsR0FBR0csSUFBSSxDQUFDVSxLQUFMLENBQVd2QixHQUFHLENBQUNRLE1BQUosQ0FBV0MsSUFBdEIsRUFBNEJlLFFBQTVCLENBQXFDLEVBQXJDLENBQVg7QUFDQWxCLElBQUFBLE9BQU8sQ0FBQ2dCLE9BQVIsR0FBa0JmLFFBQVEsQ0FBQ2tCLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUJDLFdBQW5CLEtBQW1DbkIsUUFBUSxDQUFDb0IsS0FBVCxDQUFlLENBQWYsQ0FBckQ7QUFDQXJCLElBQUFBLE9BQU8sQ0FBQ2UsSUFBUixHQUFlWCxRQUFmO0FBQ0E7O0FBRUQsTUFBSTtBQUNIVCxJQUFBQSxHQUFHLENBQUMyQixHQUFKLENBQVEsY0FBUixFQUF3QixpQ0FBeEI7QUFDQTNCLElBQUFBLEdBQUcsQ0FBQzRCLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQnhCLE9BQXJCO0FBQ0EsR0FIRCxDQUlBLE9BQU15QixHQUFOLEVBQVc7QUFDUkMsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsSUFBSUMsS0FBSixDQUFVSCxHQUFWLENBQWQ7QUFDRjdCLElBQUFBLElBQUksQ0FBQzZCLEdBQUQsQ0FBSjtBQUNBO0FBQ0QsQ0FqQ0Q7O0FBbUNBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJyQyxZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbW9kdWxlIHRpbWVzdGFtcCAqL1xuXG4vKipcbiAqIFRpbWVzdGFtcCBtaXJjb3NlcnZpY2UgaGFuZGxlclxuICogQGZ1bmN0aW9uIHRpbWVzdGFtcFxuICogQHBhcmFtIHtvYmplY3R9IHJlcSAtIFJlcXVlc3QgZnJvbSB0aGUgY2xpZW50XG4gKiBAcGFyYW0ge29iamVjdH0gcmVzIC0gUmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyXG4gKi9cbmNvbnN0IGdldFRpbWVzdGFtcCA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBjb25zdCBtb250aHNBcnJheSA9IE9iamVjdC5mcmVlemUoWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsIFxuICAgICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10pO1xuXHRjb25zdCBkYXRhT2JqID0geyBcInVuaXhcIjogbnVsbCwgXCJuYXR1cmFsXCI6IG51bGwgfTtcblx0Y29uc3QgdXNySW5wdXQgPSByZXEucGFyYW1zLmRhdGE7XG4gIGxldCBjb252VGltZSA9IG51bGw7XG4gIFxuICAvLyBGcm9tIFVuaXggdG8gbmF0dXJhbFxuXHRpZiAodXNySW5wdXQubWF0Y2goL15bMC05XSskLykpIHtcblx0XHRjb25zdCBkYXRlT2JqID0gbmV3IERhdGUocGFyc2VJbnQodXNySW5wdXQsIDEwKSk7XG5cdFx0Y29uc3QgbW9udGggPSBkYXRlT2JqLmdldE1vbnRoKCk7XG5cdFx0Y29uc3QgZGF5ID0gZGF0ZU9iai5nZXREYXRlKCk7XG5cdFx0Y29uc3QgeWVhciA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKTtcblx0XHRjb252VGltZSA9IGAke21vbnRoc0FycmF5W21vbnRoXX0gJHtkYXl9LCAke3llYXJ9YDtcblx0XHRkYXRhT2JqLnVuaXggPSB1c3JJbnB1dDtcblx0XHRkYXRhT2JqLm5hdHVyYWwgPSBjb252VGltZTtcbiAgfVxuXG4gIC8vIEZyb20gbmF0dXJhbCB0byBVbml4XG5cdGlmICh1c3JJbnB1dC5tYXRjaCgvW0EtWmEtel1cXHcrIFswLTldezEsMn0sIFswLTldezR9LykpIHtcblx0XHRjb252VGltZSA9IERhdGUucGFyc2UocmVxLnBhcmFtcy5kYXRhKS50b1N0cmluZygxMCk7XG5cdFx0ZGF0YU9iai5uYXR1cmFsID0gdXNySW5wdXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB1c3JJbnB1dC5zbGljZSgxKTtcblx0XHRkYXRhT2JqLnVuaXggPSBjb252VGltZTtcblx0fVxuXHRcblx0dHJ5IHtcblx0XHRyZXMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcpO1xuXHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKGRhdGFPYmopO1xuXHR9XG5cdGNhdGNoKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGVycikpO1xuXHRcdG5leHQoZXJyKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRpbWVzdGFtcDtcbiJdfQ==